@page "/{year:int}/{month:int}/{day:int}/{slug}"

@inherits FragmentNavigationBase

@using BlogEngine
@using BlogEngine.Configuration
@using BlogEngine.Content
@using BlogEngine.Content.Providers
@using PersonalSite.Extensions
@using PersonalSite.Markdown
@inject NavigationManager NavigationManager
@inject IConfigurationManager ConfigurationManager
@inject Browser Browser
@inject Site Site
@inject IGitHubClient GitHubClient
@inject DisqusService DisqusService

   @if (post != null)
    {
      <Title>@post.Title - @(ConfigurationManager.Configuration.GetValue<string>("Title"))</Title>
    }
<Modal @ref="commitModal">
      <header class="w3-container w3-dark-gray"> 
        <span @onclick="commitModal.Close" class="w3-button w3-display-topright">&times;</span>
        <h2>Revisions</h2>
      </header>
      <div class="w3-container" style="padding: 0">
            <Table TItem="BlogEngine.Content.Providers.CommitDto" Items="Commits.ToList().AsReadOnly()" OnRowClicked="@((commit) => OnRevisionClick(commit))">
                <TableHeader>
                            <th>SHA</th>
                            <th>Date</th>
                            <th>Author</th>
                            <th>Message</th>
                </TableHeader>
                <RowTemplate Context="commit">
                                    <td>@commit.Sha.Substring(0, 4)</td>
                                    <td>@commit.Commit.Author.Date.ToLongDateString()</td>
                                    <td>@commit.Commit.Author.Name</td>
                                    <td>@commit.Commit.Message</td>
                </RowTemplate>
            </Table>
      </div>
      <footer class="w3-container w3-dark-gray">
          <p></p>
      </footer>
</Modal>

@if (post == null)
{
    <div class="w3-card-4 w3-margin w3-white w3-display-container" style="height:300px;">
      <PostContentPlaceholder></PostContentPlaceholder>
    </div>
}
else
{
<div class="w3-card-4 w3-margin w3-white">
     @if (post.Image != null)
    {
    <img src="/w3images/bridge.jpg" alt="Norway" style="width:100%">
    }
      <div class="w3-container">
        <h1><b>@post.Title</b></h1>
        <h5><span class="w3-opacity">@post.Date.ToLocalTime().ToShortDateString()</span></h5>
      </div>

      <div class="w3-container">
          <MarkdownView Content="@post.Content"></MarkdownView>

          <div class="w3-col w3-hide-small">
            <p><span class="W3-padding-large w3-left">          
              <TwitterShareButton 
                Url="@NavigationManager.Uri" 
                Text="@post.Title">
              </TwitterShareButton>
              <LinkedInShareButton 
                Url="@NavigationManager.Uri" 
                Title="@post.Title" 
                Summary="@post.Content.StripTags().TruncateHtml(150)" 
                Source="@Site.Title" >
              </LinkedInShareButton>
            </span></p>
            <p><span class="w3-padding-large w3-right"><b>Comments &nbsp;</b> <span class="w3-badge"><DisqusCount Url="@NavigationManager.Uri"></DisqusCount></span></span></p>
            <p><span class="w3-button w3-padding-large w3-right " @onclick="ShowRevisions"><i class="fa fa-history"></i> <b>Revisions</b></span></p>
          </div>
      </div>

      <DisqusThread></DisqusThread>
</div>
}

@code {
    Modal commitModal;
    Page post = null;

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    [Parameter]
    public int? Day { get; set; }

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public IEnumerable<CommitDto> Commits { get; set; }

    protected override async Task OnInitializedAsync()
    {
        post = await Site.GetPostAsync($"{Year}-{Month.ToString().PadLeft(2, '0')}-{Day.ToString().PadLeft(2, '0')}-{Slug}");
    }

    async Task ShowRevisions() 
    {
        Commits = await GitHubClient.GetCommitsAsync(post.Path);
        commitModal.Open();
    }

    private void OnRevisionsCloseClick(MouseEventArgs ev)
    {
        commitModal.Close();
    }

    private async Task OnRevisionClick(CommitDto commitDto)
    {
        await Browser.OpenInNewTab(commitDto.HtmlUrl);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        await Browser.TopFunction();
    }
}