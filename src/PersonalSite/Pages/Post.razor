@page "/{year:int}/{month:int}/{day:int}/{slug}"

@using BlogEngine
@using BlogEngine.Configuration
@using BlogEngine.Content
@using BlogEngine.Content.Providers
@using PersonalSite.Extensions
@inject IConfigurationManager ConfigurationManager
@inject Browser Browser
@inject Site Site
@inject IGitHubClient GitHubClient

<Modal IsVisible="@revisionsVisible">
    <span class="close" style="float: right; cursor: pointer; font-size: 30px" @onclick=OnRevisionsCloseClick>&times;</span>
    <h2>Revisions</h2>

    <table class="table hover striped">
        <thead>
            <tr>
                <th>SHA</th>
                <th>Date</th>
                <th>Author</th>
                <th>Message</th>
            </tr>
        </thead>
         <tbody>
                @foreach (var commit in Commits)
                {
                    <tr style="cursor: pointer;" @onclick="@(() => OnRevisionClick(commit))">
                        <td>@commit.Sha.Substring(0, 4)</td>
                        <td>@commit.Commit.Author.Date.ToLongDateString()</td>
                        <td>@commit.Commit.Author.Name</td>
                        <td>@commit.Commit.Message</td>
                    </tr>
                }
        </tbody>
    </table>
</Modal>

@if (isLoading)
{
<Card>
    <Loader></Loader>
</Card>
}
else
{
<Card>
    <h1>@post.Title</h1>
    <h5>@post.Date.ToLocalTime().ToShortDateString()</h5>
    @if (post.Image != null)
    {
        <img class="fakeimg" style="height:200px;" src="@post.Image">
    }
    <MarkdownView Content="@post.Content"></MarkdownView>

    <ShareButtons Title="@post.Title" Summary=""></ShareButtons>

    <br />

    <button class="btn" @onclick="ShowRevisions">Show revisions</button>
</Card>
}

@code {
    Page post = null;
    bool isLoading = true;
    bool revisionsVisible = false;

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    [Parameter]
    public int? Day { get; set; }

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public IEnumerable<CommitDto> Commits { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        post = await Site.GetPostAsync($"{Year}-{Month.ToString().PadLeft(2, '0')}-{Day.ToString().PadLeft(2, '0')}-{Slug}");

        await ConfigurationManager.LoadConfigurationAsync();
        var configuration = ConfigurationManager.Configuration;

        await Browser.SetDocumentTitleAsync($"{post.Title} - {configuration.GetValue<string>("Title")}");

        isLoading = false;
    }

    async Task ShowRevisions() 
    {
        Commits = await GitHubClient.GetCommitsAsync(post.Path);
        revisionsVisible = true;
    }

    private void OnRevisionsCloseClick(MouseEventArgs ev)
    {
        revisionsVisible = false;
    }

    private async Task OnRevisionClick(CommitDto commitDto)
    {
        await Browser.OpenInNewTab(commitDto.HtmlUrl);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await Browser.TopFunction();
    }
}